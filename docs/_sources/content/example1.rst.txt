Tutorial 1 – Simulating a Simple Example
----------------------------------------
:Files:
    Ex_1_ode_sim.py

If you do not know how to get started, open Anaconda Navigator and then run Spyder IDE. In Spyder open the example by navigating into KIPET’s example folder and opening the relevant example. Run the example by pressing the green play button.

This example provides a basic 3-component, 2 reaction system with A → B and B → C, where the kinetic rate constants are fixed.


Before going into more detail, the complete block of code required to simulate this simple reaction is presented. As you can see, the user does not  require much coding to use KIPET.

::

    from kipet import KipetModel

    kipet_model = KipetModel()

    r1 = kipet_model.new_reaction('reaction-1')

    # Add the model parameters
    r1.add_parameter('k1', 2)
    r1.add_parameter('k2', 0.2)

    # Declare the components and give the initial values
    r1.add_component('A', state='concentration', init=1)
    r1.add_component('B', state='concentration', init=0.0)
    r1.add_component('C', state='concentration', init=0.0)

    # Define explicit system of ODEs
    def rule_odes(m,t):
        exprs = dict()
        exprs['A'] = -m.P['k1']*m.Z[t,'A']
        exprs['B'] = m.P['k1']*m.Z[t,'A']-m.P['k2']*m.Z[t,'B']
        exprs['C'] = m.P['k2']*m.Z[t,'B']
        return exprs

    # Add the rules to the model
    r1.add_equations(rule_odes)

    # Create the model - simulations require times
    r1.set_times(0, 10)

    # Simulate with default options
    r1.simulate()
    
    r1.results.plot()
    
We will now break this down step by step. The first step is to import the kipet module or the KipetModel class from the kipet module as in the example.
::

    from kipet import KipetModel
    
The KipetModel class contains all of the methods necessary to use KIPET. The next step is to create an instance of the KipetModel class.
::
    
    kipet_model = KipetModel()
    
The KipetModel class has the attribute "models" that acts like a dictionary and contains instances of the ReactionModel, which is where individual reaction models are contained. To create a new reaction model, it is added to the KipetModel using the method "new_reaction". Note that the reaction requires a name as the first argument.

:: 

    r1 = kipet_model.new_reaction('reaction-1')
    
We can now use the ReactionModel instance "r1" to add all of the expected model components such as the kinetic model and its parameters, the component information, and the data (if any). Parameters are added using the method "add_parameter", as seen in the current example where there are two parameters:

::

    r1.add_parameter('k1', 2)
    r1.add_parameter('k2', 0.2)

Since our system has three components, A, B, and C, these need to be declared as well. Each component requires a name and a state. The state can be concentration, spectral, state, trajectory, or custom. Each one of these states will be convered in more detail later in this tutorial. At the moment, the only state we are concerned about is concentration. For simulations, an initial value for each of the components is required. 

::

    r1.add_component('A', state='concentration', init=1)
    r1.add_component('B', state='concentration', init=0.0)
    r1.add_component('C', state='concentration', init=0.0)
    
The next step is to provide the reaction kinetics in a Pyomo friendly format. The reaction scheme for this example is defined as a python function containing each component's specific ODE within a dictionary. This is probably the most coding work that will be necessary when using KIPET. The reaction kinetic rules are placed into the model using the "add_equations" method. Please note that KIPET requires that each declared component has its own expression.

::

    def rule_odes(m,t):
        exprs = dict()
        exprs['A'] = -m.P['k1']*m.Z[t,'A']
        exprs['B'] = m.P['k1']*m.Z[t,'A']-m.P['k2']*m.Z[t,'B']
        exprs['C'] = m.P['k2']*m.Z[t,'B']
        return exprs

    r1.add_equations(rule_odes)

At this point we have provided KIPET with a reaction model, component information, and parameter data. The only thing still required for our simulation are the start and end times. Times are provided using the method "set_times". As we will see in the parameter estimation problems, explicitly providing start and end times is not necessary.

::

    r1.set_times(0, 10)
    
After this we are ready to simulate using the "simulate" method. The results are then accessible using the "results" attribute. This is an instance of the ResultsObject class, which contains convenient plotting methods to display the results. The most basic plotting tool can be accessed using the "plot" method of the "results" attribute.

::

    r1.simulate()
    r1.results.plot()
    
The results are then presented in a new browser tab using Plotly similar to the following figure.

.. _fig-coordsys-rect:

.. figure:: ex_1_sim.png
   :width: 600px
   :align: center

   Plot obtained from tutorial example 1